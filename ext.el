(defmacro %do (&rest body) `(progn ,@body))
(defmacro %fn (args &rest body) `(lambda ,args ,@body))
(defmacro %let (var val &rest body) `(let ((,var ,val)) ,@body))
(defmacro %call (f &rest args) `(funcall ,f ,@args))
(defmacro %set (lh rh) `(setq ,lh ,rh))
(defmacro %quote (x) `(quote ,x))
(defmacro %quasiquote (x) `(\` ,x))
(defmacro %unquote (x) `(\, ,x))
(defmacro %unquote-splicing (x) `(\,@ ,x))
(defmacro %compiling (&rest body) (elisp-eval `(progn ,@body)))

(defmacro %if (&rest args)
  (cond ((= (length args) 0) `(do))
        ((= (length args) 1) `(do ,(car args)))
        ((= (length args) 2) `(if ,(car args) ,(cadr args)))
        ((= (length args) 3) `(if ,(car args) ,(cadr args) ,(caddr args)))
        (t `(%if ,(car args) ,(cadr args) (%if ,@(cddr args))))))

(provide 'ext)
